//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/manetrouting/VCap/msgNeighborDisc.msg.
//

#ifndef _MSGNEIGHBORDISC_M_H_
#define _MSGNEIGHBORDISC_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include <Eigen/Dense>
#include "Coord.h"
#include "IPv4Address.h"
#include "msgNeighborDisc.h"
// }}



/**
 * Class generated from <tt>networklayer/manetrouting/VCap/msgNeighborDisc.msg</tt> by opp_msgc.
 * <pre>
 * packet msgNeighborDisc {
 *     
 *     IPv4Address srcIP;
 *     
 *     double W=10000;
 *     double X=10000;
 *     double Y=10000;
 *     double Z=10000;
 * 
 *     double X1=10000;
 *  	double X2=10000;
 * 
 *     PUMatrixPositionCH  puMatrixPositionCh [];
 * 
 * 
 * 
 *     double ewt [];
 *     double pioff [];
 *   
 * 	
 *    
 * };
 * </pre>
 */
class INET_API msgNeighborDisc : public ::cPacket
{
  protected:
    IPv4Address srcIP_var;
    double W_var;
    double X_var;
    double Y_var;
    double Z_var;
    double X1_var;
    double X2_var;
    PUMatrixPositionCH *puMatrixPositionCh_var; // array ptr
    unsigned int puMatrixPositionCh_arraysize;
    double *ewt_var; // array ptr
    unsigned int ewt_arraysize;
    double *pioff_var; // array ptr
    unsigned int pioff_arraysize;

  private:
    void copy(const msgNeighborDisc& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const msgNeighborDisc&);

  public:
    msgNeighborDisc(const char *name=NULL, int kind=0);
    msgNeighborDisc(const msgNeighborDisc& other);
    virtual ~msgNeighborDisc();
    msgNeighborDisc& operator=(const msgNeighborDisc& other);
    virtual msgNeighborDisc *dup() const {return new msgNeighborDisc(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPv4Address& getSrcIP();
    virtual const IPv4Address& getSrcIP() const {return const_cast<msgNeighborDisc*>(this)->getSrcIP();}
    virtual void setSrcIP(const IPv4Address& srcIP);
    virtual double getW() const;
    virtual void setW(double W);
    virtual double getX() const;
    virtual void setX(double X);
    virtual double getY() const;
    virtual void setY(double Y);
    virtual double getZ() const;
    virtual void setZ(double Z);
    virtual double getX1() const;
    virtual void setX1(double X1);
    virtual double getX2() const;
    virtual void setX2(double X2);
    virtual void setPuMatrixPositionChArraySize(unsigned int size);
    virtual unsigned int getPuMatrixPositionChArraySize() const;
    virtual PUMatrixPositionCH& getPuMatrixPositionCh(unsigned int k);
    virtual const PUMatrixPositionCH& getPuMatrixPositionCh(unsigned int k) const {return const_cast<msgNeighborDisc*>(this)->getPuMatrixPositionCh(k);}
    virtual void setPuMatrixPositionCh(unsigned int k, const PUMatrixPositionCH& puMatrixPositionCh);
    virtual void setEwtArraySize(unsigned int size);
    virtual unsigned int getEwtArraySize() const;
    virtual double getEwt(unsigned int k) const;
    virtual void setEwt(unsigned int k, double ewt);
    virtual void setPioffArraySize(unsigned int size);
    virtual unsigned int getPioffArraySize() const;
    virtual double getPioff(unsigned int k) const;
    virtual void setPioff(unsigned int k, double pioff);
};

inline void doPacking(cCommBuffer *b, msgNeighborDisc& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, msgNeighborDisc& obj) {obj.parsimUnpack(b);}


#endif // _MSGNEIGHBORDISC_M_H_
