//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/manetrouting/VCap/msgToRoute.msg.
//

#ifndef _MSGTOROUTE_M_H_
#define _MSGTOROUTE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "IPv4Address.h"
#include "IPv4Datagram_m.h"
#include "VCoord.h"
#include <list>
// }}



/**
 * Class generated from <tt>networklayer/manetrouting/VCap/msgToRoute.msg</tt> by opp_msgc.
 * <pre>
 * packet msgToRoute {
 *    IPv4Address srcIP;
 *   
 *    IPv4Address  destIP;
 *    VCoord   destVC;
 *    
 *    DeadendList deadendList;
 *   PathList pathList;
 * 
 *    
 *   
 *     
 * };
 * </pre>
 */
class INET_API msgToRoute : public ::cPacket
{
  protected:
    IPv4Address srcIP_var;
    IPv4Address destIP_var;
    VCoord destVC_var;
    DeadendList deadendList_var;
    PathList pathList_var;

  private:
    void copy(const msgToRoute& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const msgToRoute&);

  public:
    msgToRoute(const char *name=NULL, int kind=0);
    msgToRoute(const msgToRoute& other);
    virtual ~msgToRoute();
    msgToRoute& operator=(const msgToRoute& other);
    virtual msgToRoute *dup() const {return new msgToRoute(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPv4Address& getSrcIP();
    virtual const IPv4Address& getSrcIP() const {return const_cast<msgToRoute*>(this)->getSrcIP();}
    virtual void setSrcIP(const IPv4Address& srcIP);
    virtual IPv4Address& getDestIP();
    virtual const IPv4Address& getDestIP() const {return const_cast<msgToRoute*>(this)->getDestIP();}
    virtual void setDestIP(const IPv4Address& destIP);
    virtual VCoord& getDestVC();
    virtual const VCoord& getDestVC() const {return const_cast<msgToRoute*>(this)->getDestVC();}
    virtual void setDestVC(const VCoord& destVC);
    virtual DeadendList& getDeadendList();
    virtual const DeadendList& getDeadendList() const {return const_cast<msgToRoute*>(this)->getDeadendList();}
    virtual void setDeadendList(const DeadendList& deadendList);
    virtual PathList& getPathList();
    virtual const PathList& getPathList() const {return const_cast<msgToRoute*>(this)->getPathList();}
    virtual void setPathList(const PathList& pathList);
};

inline void doPacking(cCommBuffer *b, msgToRoute& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, msgToRoute& obj) {obj.parsimUnpack(b);}


#endif // _MSGTOROUTE_M_H_
