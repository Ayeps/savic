//
// Generated file, do not edit! Created by opp_msgc 4.3 from networklayer/manetrouting/search/searRouteRequest.msg.
//

#ifndef _SEARROUTEREQUEST_M_H_
#define _SEARROUTEREQUEST_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "IPv4Address.h"
#include "Coord.h"
#include "searRouting.h"
#include <list>
// }}



/**
 * Class generated from <tt>networklayer/manetrouting/search/searRouteRequest.msg</tt> by opp_msgc.
 * <pre>
 * packet SearRouteRequest
 * {
 * 	IPv4Address src;
 * 	IPv4Address dst;
 * 	Coord srcPos;
 * 	Coord dstPos;
 * 	bool workingChannel; 
 * 	PathList pathList;
 * 	PathList DPList;
 * }
 * </pre>
 */
class INET_API SearRouteRequest : public ::cPacket
{
  protected:
    IPv4Address src_var;
    IPv4Address dst_var;
    Coord srcPos_var;
    Coord dstPos_var;
    bool workingChannel_var;
    PathList pathList_var;
    PathList DPList_var;

  private:
    void copy(const SearRouteRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SearRouteRequest&);

  public:
    SearRouteRequest(const char *name=NULL, int kind=0);
    SearRouteRequest(const SearRouteRequest& other);
    virtual ~SearRouteRequest();
    SearRouteRequest& operator=(const SearRouteRequest& other);
    virtual SearRouteRequest *dup() const {return new SearRouteRequest(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPv4Address& getSrc();
    virtual const IPv4Address& getSrc() const {return const_cast<SearRouteRequest*>(this)->getSrc();}
    virtual void setSrc(const IPv4Address& src);
    virtual IPv4Address& getDst();
    virtual const IPv4Address& getDst() const {return const_cast<SearRouteRequest*>(this)->getDst();}
    virtual void setDst(const IPv4Address& dst);
    virtual Coord& getSrcPos();
    virtual const Coord& getSrcPos() const {return const_cast<SearRouteRequest*>(this)->getSrcPos();}
    virtual void setSrcPos(const Coord& srcPos);
    virtual Coord& getDstPos();
    virtual const Coord& getDstPos() const {return const_cast<SearRouteRequest*>(this)->getDstPos();}
    virtual void setDstPos(const Coord& dstPos);
    virtual bool getWorkingChannel() const;
    virtual void setWorkingChannel(bool workingChannel);
    virtual PathList& getPathList();
    virtual const PathList& getPathList() const {return const_cast<SearRouteRequest*>(this)->getPathList();}
    virtual void setPathList(const PathList& pathList);
    virtual PathList& getDPList();
    virtual const PathList& getDPList() const {return const_cast<SearRouteRequest*>(this)->getDPList();}
    virtual void setDPList(const PathList& DPList);
};

inline void doPacking(cCommBuffer *b, SearRouteRequest& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SearRouteRequest& obj) {obj.parsimUnpack(b);}


#endif // _SEARROUTEREQUEST_M_H_
